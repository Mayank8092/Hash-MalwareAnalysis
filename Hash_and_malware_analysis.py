from cryptography.fernet import Fernet
import hashlib
import os
import time
from pyfiglet import Figlet
from colorama import init, Fore, Style

def generate_key():
    key = Fernet.generate_key()
    return key

def encrypt_message(message, key):
    fernet = Fernet(key)
    encrypted = fernet.encrypt(message.encode())
    return encrypted

def decrypt_message(encrypted, key):
    fernet = Fernet(key)
    decrypted = fernet.decrypt(encrypted)
    return decrypted.decode()

def get_user_input(prompt):
    while True:
        choice = input(prompt + "\n1. Text to Hash\n2. Hash to Hash\n3. File Path\n4. Encrypt Text\n5. Decrypt Text\n6. Hash to Text\n7. Exit from Script\nEnter your choice: ")
        if choice in ("1", "2", "3", "4", "5", "6", "7"):
            return choice
        else:
            print("Invalid choice. Please enter a number between 1 and 7.")

def get_text_input():
    text = input("Enter the text: ")
    return text.encode()

def get_hash_type():
    print(Fore.BLUE + "Select hash type:")
    print("1. MD5")
    print("2. SHA-256")
    print("3. RIPEMD-160")
    print("4. SHA-1")

    while True:
        try:
            choice = int(input("Enter your choice: "))
            if 1 <= choice <= 4:
                hash_types = {1: 'md5', 2: 'sha256', 3: 'ripemd160', 4: 'sha1'}
                return hash_types[choice]
            else:
                print("Invalid choice. Please enter a number between 1 and 4.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def calculate_hash(data, hash_type):
    hash_obj = hashlib.new(hash_type)
    hash_obj.update(data)
    return hash_obj.hexdigest()

def convert_hash(hash_value, source_type, target_type):
    if source_type not in ['md5', 'sha256'] or target_type not in ['md5', 'sha256']:
        print(f"Warning: Conversion from {source_type} to {target_type} not supported.")
        return None

    try:
        if source_type == 'md5' and target_type == 'sha256':
            hash_obj = hashlib.sha256(bytes.fromhex(hash_value))
            return hash_obj.hexdigest()
        elif source_type == 'sha256' and target_type == 'md5':
            print("Warning: Conversion from SHA-256 to MD5 is not supported.")
            return None
        else:
            return hash_value
    except ValueError:
        print("Invalid hash value.")
        return None

def get_file_path():
    while True:
        file_path = input(Fore.CYAN + "Enter the path to the file: ")
        if os.path.exists(file_path):
            return file_path
        else:
            print("Invalid file path. Please enter a valid path:")

def calculate_file_hash(file_path, hash_type):
    try:
        with open(file_path, 'rb') as file:
            data = file.read()
        return calculate_hash(data, hash_type)
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
    except PermissionError:
        print(f"Error: Insufficient permissions to access '{file_path}'.")
    return None

def animate_scanning(duration=100):
    scan_lines = [
        "Analyzing file structure...",
        "Verifying code integrity...",
        "Scanning Malware in Database...",
        "Matching against known malware signatures...",
        "Decrypting obfuscated content...",
        "Cross-referencing with threat intelligence feeds..."
    ]
    for i, line in enumerate(scan_lines):
        time.sleep(3)
        print("\033[K", end="\r")

        progress_bar = "[" + ("=" * int((i + 1) * (20 / len(scan_lines)))) + ">" + (" " * (20 - int((i + 1) * (20 / len(scan_lines))))) + "]"
        print(f"{progress_bar} {line}")

    print("\nScanning complete!")

def check_text_signatures(file_path, signature_files):
    signatures = set()
    for signature_file in signature_files:
        try:
            with open(signature_file, 'r') as f:
                signatures.update(line.strip() for line in f)
            with open(file_path, 'rb') as file:  #Open the file in binary mode
                file_data = file.read()
                if any(signature.encode() in file_data for signature in signatures):
                    break
        except FileNotFoundError:
            print(f"Error: Signature file '{signature_file}' not found.")
    return signatures

def bold(text):
    return '\033[1m' + text + '\033[0m'

def bolder(text):
    return '\033[80m' + text + '\033'

def hash_to_text(hash_value, hash_type):
    wordlist_path = input("Enter the path to the wordlist: ")
    try:
        with open(wordlist_path, 'r') as file:
            for line in file:
                word = line.strip()
                if calculate_hash(word.encode(), hash_type) == hash_value:
                    return word
    except FileNotFoundError:
        print(f"Error: Wordlist file '{wordlist_path}' not found.")
    except PermissionError:
        print(f"Error: Insufficient permissions to access '{wordlist_path}'.")
    return None

if __name__ == "__main__":
    init(autoreset=True)

    f = Figlet(font='slant')
    print(bolder(Fore.RED + f.renderText('hash Generator')))
    text = "By:M.**..Anonymous "
    text1 = "Github Page : Not Included"
    padding = int((80 - len(text)) / 2)
    print(" " * padding + text + " " * padding)
    padding = int((80 - len(text1)) / 2)
    print(" " * padding + text1 + " " * padding)

    encryption_key = None

    while True:
        time.sleep(2)
        choice = get_user_input(Fore.CYAN + "Choose an option")

        if choice == "1":
            text = get_text_input()
            hash_type = get_hash_type()
            hash_value = calculate_hash(text, hash_type)
            print(Fore.GREEN + f"Hash Value: {hash_value}")

        elif choice == "2":
            hash_value = input(Fore.CYAN + "Enter the hash value: ")
            source_type = input(Fore.CYAN + "Enter the source hash type (md5, sha256): ").lower()
            target_type = input(Fore.CYAN + "Enter the target hash type (md5, sha256): ").lower()
            converted_hash = convert_hash(hash_value, source_type, target_type)
            if converted_hash:
                print(Fore.GREEN + f"Converted hash ({target_type}): {converted_hash}")
            else:
                print(Fore.RED + "Hash conversion failed. \n \n\n")

        elif choice == "3":
            file_path = get_file_path()
            hash_type = get_hash_type()
            hash_value = calculate_file_hash(file_path, hash_type)
            if hash_value:
                print(Fore.GREEN + f"Hash Value of Given File is: {hash_value}")
                print(bold("Scanning Your Hash in Malware Database....."))
                time.sleep(3)
                print(Fore.MAGENTA + "Launching Malware Scan...")
                animate_scanning(duration=0)
                signature_files = ["/home/kali/Documents/python/hashes.txt", "/home/kali/Documents/python/md5.txt", "/home/kali/Documents/python/sha1.txt", "/home/kali/Documents/python/sha256.txt"]
                text_signatures = check_text_signatures(file_path, signature_files)
                if text_signatures:
                    # for signature in text_signatures:
                    #     print(f"- {signature}")
                     print(Fore.GREEN+"Congratulations !!! No malware found in this File. \n \n \n")
                else:
                    print(Fore.RED+f"WARNING: Found potential malware signatures: \n \n \n")
            else:
                print("An error occurred while calculating the hash. \n \n \n")

        elif choice == "4":
            message = input("Enter the text to encrypt: ")
            encryption_key = generate_key()
            print(Fore.GREEN + "Generated Key:", encryption_key.decode())
            encrypted_message = encrypt_message(message, encryption_key)
            print(Fore.GREEN + "Encrypted message:", encrypted_message.decode())

        elif choice == "5":
            if encryption_key is None:
                encryption_key = input("Enter the encryption key: ").encode()
            encrypted_message = input("Enter the encrypted message: ").encode()
            try:
                decrypted_message = decrypt_message(encrypted_message, encryption_key)
                print(Fore.GREEN + "Decrypted message:", decrypted_message )
            except Exception as e:
                print(Fore.RED + "Decryption failed. Please check the key and the encrypted message.\n \n\n")

        elif choice == "6":
            hash_value = input("Enter the hash value: ")
            hash_type = get_hash_type()
            original_text = hash_to_text(hash_value, hash_type)
            if original_text:
                print("Scanning Given Wordlist....")
                time.sleep(3)
                print(Fore.GREEN + f"Original text: {original_text} \n \n")
            else:
                print("Scanning Given Wordlist....")
                time.sleep(3)
                print(Fore.RED + "Original text not found in the wordlist. \n \n \n")

        elif choice == "7":
            print(Fore.RED + "Exiting the script. Goodbye!..........")
            time.sleep(3)
            break
